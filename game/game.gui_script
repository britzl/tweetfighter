local flow = require "ludobits.m.flow"
local events = require "game.events"

local MAX_VALUE = 10

local START_YEAR = 2017
local MONTHS = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" }

local MILITARY_SUITS = { "_0044_SUIT-ARMY", "_0049_SUIT-NAVY" }
local CIVILIAN_SUITS = { "_0045_SUIT-BEIGE", "_0046_SUIT-GRAY-3", "_0047_SUIT-GRAY-1", "_0048_SUIT-GRAY-2" }
local FACES = { "_0050_FACE-4", "_0051_FACE-3", "_0052_FACE-2", "_0053_FACE-1" }
local HAIRS = { "_0000_HAIR-SHORT-BROWN", "_0001_HAIR-SHORT-BLONDE", "_0002_HAIR-SHORT-WHITE", "_0003_HAIR-SHORT-BLACK", "_0004_HAIR-SHORT-GRAY", "_0005_HAIR-GUILE-BROWN", "_0006_HAIR-GUILE-BLONDE", "_0007_HAIR-GUILE-WHITE", "_0008_HAIR-GUILE-BLACK", "_0009_HAIR-GUILE-GRAY", "_0010_HAIR-TRUMP-BROWN", "_0011_HAIR-TRUMP-BLONDE", "_0012_HAIR-TRUMP-WHITE", "_0013_HAIR-TRUMP-BLACK", "_0014_HAIR-TRUMP-GRAY", "_0015_HAIR-BEARD-ONLY-BROWN", "_0016_HAIR-BEARD-ONLY-BLONDE", "_0017_HAIR-BEARD-ONLY-WHITE", "_0018_HAIR-BEARD-ONLY-BLACK", "_0019_HAIR-BEARD-ONLY-GRAY", "_0020_HAIR-BEARD-BROWN", "_0021_HAIR-BEARD-BLONDE", "_0022_HAIR-BEARD-WHITE", "_0023_HAIR-BEARD-BLACK", "_0024_HAIR-BEARD-GRAY", "_0025_HAIR-PROPER-BROWN", "_0026_HAIR-PROPER-BLONDE", "_0027_HAIR-PROPER-WHITE", "_0028_HAIR-PROPER-BLACK", "_0029_HAIR-PROPER-GRAY", "_0030_HAIR-OLD-2-BROWN", "_0031_HAIR-OLD-2-BLONDE", "_0032_HAIR-OLD-2-WHITE", "_0033_HAIR-OLD-2-BLACK", "_0034_HAIR-OLD-2-GRAY", "_0035_HAIR-OLD-1-BROWN", "_0036_HAIR-OLD-1-BLONDE", "_0037_HAIR-OLD-1-WHITE", "_0038_HAIR-OLD-1-BLACK", "_0039_HAIR-OLD-1-GRAY" }
local TIES = { "_0040_TIE-GREEN", "_0041_TIE-BLACK", "_0042_TIE-BLUE", "_0043_TIE-RED" }

local world_position
world_position = function(node, pos)
	pos = pos or vmath.vector3()
	local parent = gui.get_parent(node)
	if parent then
		return world_position(parent, pos + gui.get_position(node))
	end
	return pos
end


function shuffle(t)
	local size = #t
	for i = size, 1, -1 do
		local rand = math.random(size)
		t[i], t[rand] = t[rand], t[i]
	end
	return t
end


local function random(list)
	return list[math.random(1, #list)]
end


local function lerp(a, b, t)
	return a + (b - a) * t
end


local function random_messenger(type)
	local messenger = {}
	messenger.face = random(FACES)
	messenger.hair = random(HAIRS)
	messenger.tie = random(TIES)
	if type == "MILITARY" then
		messenger.suit = random(MILITARY_SUITS)
	else
		messenger.suit = random(CIVILIAN_SUITS)
	end
	return messenger
end


local function progressive(from, to, duration, on_change, on_done)
	flow(function()
		local start = socket.gettime()
		while true do
			local now = socket.gettime()
			local t = (now - start) / duration
			if t > 1.0 then
				break
			end
			local v = lerp(from, to, t)
			on_change(v)
			flow.frames(1)
		end
		on_change(to)
		if on_done then on_done() end
	end)
end


local function countup(self, node, from, to, duration)
	progressive(from, to, duration, function(v)
		gui.set_text(node, ("%.1fK"):format(v / 1000))
	end)
end


local function printout(self, node, message, duration)
	progressive(1, #message, duration, function(v)
		gui.set_text(node, message:sub(1, math.ceil(v)))
	end)
end


local function blink(self, node, count, interval)
	timer.seconds(interval or 0.5, function()
		gui.set_enabled(node, not gui.is_enabled(node))
		if count >= 0 then
			blink(self, node, count - 0.5, interval)
		end
	end)
end


local function hide_tweet(self, tweet, duration, delay)
	gui.animate(tweet.root, gui.PROP_POSITION, tweet.position + tweet.hidden, gui.EASING_INQUAD, duration or 1, delay or 0)
end


local function show_tweet(self, tweet, message, duration, delay)
	gui.set_text(tweet.comments, "-")
	gui.set_text(tweet.retweets, "-")
	gui.set_text(tweet.likes, "-")
	gui.set_text(tweet.message, message)
	gui.set_position(tweet.root, tweet.position + tweet.hidden)
	gui.animate(tweet.root, gui.PROP_POSITION, tweet.position, gui.EASING_OUTQUAD, duration or 1, delay or 0)
end


local function new_month(self, event)
	msg.post(".", "acquire_input_focus")
	self.current_event = event
	self.months = self.months + 1
	if self.months == 1 + (12 * 4) then
		print("First period")
	elseif self.months == 1 + (12 * 4 * 4) then
		print("Second period")
	end
	local year = START_YEAR + math.floor((self.months - 1) / 12)
	local month = 1 + ((self.months - 1) % 12)
	gui.set_text(self.date, ("%s\n%d"):format(MONTHS[month], year))
	
	gui.set_text(self.event_message, "")
	
	gui.set_text(self.event_messenger_name, event.messenger_name)
	gui.play_flipbook(self.event_messenger_face, event.messenger.face)
	gui.play_flipbook(self.event_messenger_hair, event.messenger.hair)
	gui.play_flipbook(self.event_messenger_face, event.messenger.face)
	gui.play_flipbook(self.event_messenger_tie, event.messenger.tie)
	gui.play_flipbook(self.event_messenger_suit, event.messenger.suit)
	gui.set_position(self.event_root, self.event_position + vmath.vector3(1000, 0, 0))
	gui.animate(self.event_root, gui.PROP_POSITION, self.event_position, gui.EASING_OUTQUAD, 1, 0, function()
	printout(self, self.event_message, event.event, 1)
	--printout(self, self.event_message, random(event.message), 1)
		for i=1,2 do
			local tweet = self.tweets[i]
			show_tweet(self, tweet, event.tweets[i].text, 1, 0.5)
		end
	end)
end


local function hide_event(self, duration, delay, cb)
	gui.animate(self.event_root, gui.PROP_POSITION, self.event_position - vmath.vector3(1000, 0, 0), gui.EASING_INQUAD, duration or 1, delay or 0, cb)
end


local function is_game_over(self)
	for i = 1, 4 do
		if self.values[i] == 0 then
			return true
		end
	end
	return false
end



local function change_value(self, value, change)
	local value_before_change = value.value
	value.value = value.value + change
	value.value = math.min(value.value, MAX_VALUE)
	value.value = math.max(value.value, 0)
		
	if value_before_change ~= value.value then
		blink(self, value.title, 2, 0.5)
		progressive(value_before_change, value.value, 1, function(v)
			local size = vmath.vector3(value.size)
			local ratio = v / MAX_VALUE
			size.x = size.x * ratio
			gui.set_size(value.bar, size)
			gui.play_flipbook(value.bar, change > 0 and hash("BAR-GREEN-9SLICE") or hash("BAR-RED-9SLICE"))
		end, function()
			gui.play_flipbook(value.bar, hash("BAR-BLUE-9SLICE"))
		end)
	end
end


local function update_values(self, change)
	for i = 1, 4 do
		if change[i] ~= 0 then
			change_value(self, self.values[i], change[i])
		end
	end
end


local function send_tweet(self, tweet_id, hide_id)
	msg.post(".", "release_input_focus")
	local tweet = self.tweets[tweet_id]
	local world_pos = world_position(tweet.button)
	local arm_pos = gui.get_position(self.arm)
	world_pos.x = arm_pos.x
	arm_pos.y = world_pos.y - 1000
	gui.set_position(self.arm, arm_pos)
	gui.animate(self.arm, gui.PROP_POSITION, world_pos, gui.EASING_OUTQUAD, 1, 0, function()
		-- hide the arm again
		gui.animate(self.arm, gui.PROP_POSITION, arm_pos, gui.EASING_INQUAD, 1, 0.25)
		-- play the button click animation
		gui.play_flipbook(tweet.button, hash("tweet_click"))
		-- wait a while and then hide tweet, count up likes, update values etc
		timer.seconds(0.25, function()
			hide_tweet(self, self.tweets[hide_id], 1, 0)
			countup(self, tweet.comments, 0, math.random(10000, 200000), 1)
			countup(self, tweet.retweets, 0, math.random(10000, 200000), 1)
			countup(self, tweet.likes, 0, math.random(10000, 200000), 1)
			update_values(self, self.current_event.tweets[tweet_id].values)
			hide_tweet(self, tweet, 1, 1)
			hide_event(self, 1, 1, function()
				msg.post("#", "new_month")
			end)
			if is_game_over(self) then
				print("game over")
			end
		end)
	end, gui.PLAYBACK_ONCE_FORWARD)
end


function init(self)
	self.months = 0

	self.events = events.new_game()

	self.values = {}
	for i=1,4 do
		self.values[i] = {
			value = MAX_VALUE,
			title = gui.get_node("value" .. i .. "/title"),
			bar = gui.get_node("value" .. i .. "/bar"),
			size = gui.get_size(gui.get_node("value" .. i .. "/bar_bg")),
		}
	end
	
	self.tweets = {
		{
			root = gui.get_node("tweet1/root"),
			hidden = vmath.vector3(-1000, 0, 0),
			position = gui.get_position(gui.get_node("tweet1/root")),
			message = gui.get_node("tweet1/message"),
			button = gui.get_node("tweet1/button"),
			comments = gui.get_node("tweet1/comments"),
			retweets = gui.get_node("tweet1/retweets"),
			likes = gui.get_node("tweet1/likes"),
		},
		{
			root = gui.get_node("tweet2/root"),
			hidden = vmath.vector3(1000, 0, 0),
			position = gui.get_position(gui.get_node("tweet2/root")),
			message = gui.get_node("tweet2/message"),
			button = gui.get_node("tweet2/button"),
			comments = gui.get_node("tweet2/comments"),
			retweets = gui.get_node("tweet2/retweets"),
			likes = gui.get_node("tweet2/likes"),
		},
	}

	self.event_root = gui.get_node("event")
	self.event_position = gui.get_position(self.event_root)
	self.event_messenger_face = gui.get_node("messenger_face")
	self.event_messenger_tie = gui.get_node("messenger_tie")
	self.event_messenger_hair = gui.get_node("messenger_hair")
	self.event_messenger_suit = gui.get_node("messenger_suit")
	self.event_message = gui.get_node("event_message")
	self.event_messenger_name = gui.get_node("event_messenger_name")
	self.arm = gui.get_node("arm")
	self.date = gui.get_node("date")

	for i=1,2 do
		local tweet = self.tweets[i]
		gui.set_position(tweet.root, tweet.position + tweet.hidden)
	end

	math.randomseed(os.time())
	msg.post("#", "new_month")
	msg.post("@render:", "clear_color", { color = vmath.vector4(0x19/256, 0x19/256, 0x19/256, 1.0) })
	
end

function update(self, dt)
	flow.update(dt)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("new_month") then
		local event = table.remove(self.events, 1)
		shuffle(event.tweets)
		new_month(self, {
			messenger_name = random(event.messenger),
			messenger = random_messenger(event.messenger_type),
			event = random(event.message),
			tweets = {
				{
					text = random(event.tweets[1].message),
					values = event.tweets[1].values,
				},
				{
					text = random(event.tweets[2].message),
					values = event.tweets[2].values,
				}
			}
		})
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.released then
		if gui.pick_node(self.tweets[1].button, action.x, action.y) then
			send_tweet(self, 1, 2)
		elseif gui.pick_node(self.tweets[2].button, action.x, action.y) then
			send_tweet(self, 2, 1)
		end
	end
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
